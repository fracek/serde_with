name: Rust CI
on:
  pull_request:
  push:
    branches:
      - master
      - staging
      - trying

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: -D warnings

jobs:
  clippy_check:
    strategy:
      matrix:
        os: [
          "ubuntu-latest",
          "windows-latest",
        ]
        rust: [
          "stable",
          "nightly",
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: clippy
      - uses: actions-rs/clippy-check@v1
        name: clippy "No Default Features" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --no-default-features -- -D warnings
          name: clippy "No Default Features" (${{ matrix.os }} / ${{ matrix.rust }})
      - uses: actions-rs/clippy-check@v1
        name: clippy "Default" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace -- -D warnings
          name: clippy "Default" (${{ matrix.os }} / ${{ matrix.rust }})
      - uses: actions-rs/clippy-check@v1
        name: clippy "All Features" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features -- -D warnings
          name: clippy "All Features" (${{ matrix.os }} / ${{ matrix.rust }})

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        name: Rustfmt Check (${{ matrix.rust }})
        with:
          command: fmt
          args: --all -- --check

  build_and_test:
    name: Build and Test
    needs: [
      "rustfmt",
      "clippy_check",
    ]
    strategy:
      matrix:
        os: [
          "ubuntu-latest",
          "windows-latest",
        ]
        rust: [
          "1.36.0",
          "stable",
          "beta",
          "nightly",
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: rustfmt
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-expand
          version: latest
        if: matrix.rust == 'nightly'

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-audit
          version: latest
      - uses: actions-rs/cargo@v1
        name: Build (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          command: build
          args: --all --all-features
      - uses: actions-rs/cargo@v1
        name: Test "No Default Features" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          command: test
          args: --all --no-default-features
      - uses: actions-rs/cargo@v1
        name: Test "Default" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          command: test
          args: --all
      - uses: actions-rs/cargo@v1
        name: Test "All Features" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          command: test
          args: --all --all-features

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        if: matrix.rust == 'stable'  && matrix.os == 'ubuntu-latest'
        with:
          args: "--workspace --all-features -- --test-threads 1"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.7
        if: matrix.rust == 'stable'  && matrix.os == 'ubuntu-latest'
